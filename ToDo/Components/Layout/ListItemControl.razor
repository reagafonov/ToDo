@using ToDo.Models
@inject HttpClient Http

    @if (Editing)
    {
        <input type="text" class="header-input" placeholder="Введите название" @bind="Model.Name" @onblur="OnBlurAsync" >
    }
    else
    {
            <ul class="nav-link"   @onclick="OnClickAsync" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu navbar-toggler" aria-hidden="true" > @Model.Name</span>
            </ul>
    }
   

    @if (Visible)
    {
        <div class="nav-item px-3">
            <div @onclick="RenameListAsync">Rename list</div>
            <div @onclick="DeleteListAsync">Delete list</div>
        </div>
    }


@code {

    [Parameter] public Guid? Id { get; set; }

    [Parameter] public UserTaskListAddModel Model { get; set; }

    private bool Visible { get; set; }

    private bool Editing { get; set; }

    void RenameListAsync()
    {
        Editing = true;
        StateHasChanged();
    }

    private async Task DeleteListAsync()
    {
        await Http.DeleteAsync($"TaskList/{Id}");
    }

    private async Task OnBlurAsync(FocusEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(Model.Name))
        {

            Model.Name = Model.Name.Trim();

            //небольшая задержка, необходимая для нормальной работы
            await Task.Delay(100);

            Editing = false;

            if (!Id.HasValue)
            {

                HttpResponseMessage response = await Http.PostAsJsonAsync("TaskList", Model);

                if (response.IsSuccessStatusCode)
                {
                    Id = await response.Content.ReadFromJsonAsync<Guid>();
                }
            }
            else
                await Http.PostAsJsonAsync("TaskList", Model);
        }

        StateHasChanged();
    }

    private async Task OnClickAsync(MouseEventArgs e)
    {
        if (e.Button != 0)
            return;

        await Task.Delay(200);

        Visible = true;

        StateHasChanged();
    }

}