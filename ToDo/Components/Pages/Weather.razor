@page "/list/{id:guid}"
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using ToDo.Models
@attribute [StreamRendering]
@inject HttpClient Http;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (_forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
       
        <tbody>
        @foreach (UserTaskSmallModel model in Models)
        {
            <tr>
                <td><input type="checkbox" @bind="model.IsCompleted"/></td>
                <td>@model.Name</td>

            </tr>
        }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    public ICollection<UserTaskSmallModel>? Models { get; set; }
    
    private WeatherForecast[]? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        Models = await Http.GetFromJsonAsync<List<UserTaskSmallModel>>($"Task/list/{Id}");
        
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        DateOnly startDate = DateOnly.FromDateTime(DateTime.Now);
        string[] summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        _forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}